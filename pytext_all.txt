============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup FAILED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only FAILED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted FAILED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
________________ Test00UserRegistration.test_00_nodata_signup _________________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61E836308>
client = <django.test.client.Client object at 0x000001B61EB00D88>

    @pytest.mark.django_db(transaction=True)
    def test_00_nodata_signup(self, client):
        request_type = 'POST'
        response = client.post(self.url_signup)
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` без параметров '
            f'не создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` без параметров не создаетс€ пользователь и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:22: AssertionError
---------------------------- Captured stdout setup ----------------------------
Operations to perform:
  Synchronize unmigrated apps: django_filters, messages, rest_framework, staticfiles
  Apply all migrations: admin, auth, contenttypes, reviews, sessions, users
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying users.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying reviews.0001_initial... OK
  Applying sessions.0001_initial... OK
  Applying users.0002_user_confirmation_code... OK
  Applying users.0003_auto_20220509_1301... OK
---------------------------- Captured stderr setup ----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_____________ Test00UserRegistration.test_00_invalid_data_signup ______________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61EAE7CC8>
client = <django.test.client.Client object at 0x000001B61EB32D08>

    @pytest.mark.django_db(transaction=True)
    def test_00_invalid_data_signup(self, client):
        invalid_email = 'invalid_email'
        invalid_username = 'invalid_username@yamdb.fake'
    
        invalid_data = {
            'email': invalid_email,
            'username': invalid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=invalid_data)
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с невалидными данными '
            f'не создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с невалидными данными не создаетс€ пользователь и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:51: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
____________ Test00UserRegistration.test_00_valid_data_user_signup ____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61E7E3D88>
client = <django.test.client.Client object at 0x000001B61ECCE1C8>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с валидными данными создаетс€ пользователь и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:95: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61E98DE48>
admin_client = <rest_framework.test.APIClient object at 0x000001B61EA61388>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
>       assert response.status_code != 404, (
            f'—траница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_00_user_registration.py:137: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61F035E88>
client = <django.test.client.Client object at 0x000001B61D8C53C8>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
        response = client.post(self.url_token)
        assert response.status_code != 404, (
            f'—траница `{self.url_token}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 400
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` без параметров, '
            f'возвращаетс€ статус {code}'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` без username, '
            f'возвращаетс€ статус {code}'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        code = 404
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` с несуществующим username, '
            f'возвращаетс€ статус {code}'
        )
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с валидными данными создаетс€ пользователь и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:228 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/token/
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_____ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61ECD8B48>
client = <django.test.client.Client object at 0x000001B61F0C8148>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = 'valid@yamdb.fake'
        invalid_username = 'me'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email,
            'username': invalid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:239: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000001B61F0B68C8>
client = <django.test.client.Client object at 0x000001B61F0D8448>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'можно создать пользовател€ с валидными данными и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` можно создать пользовател€ с валидными данными и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:258: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
________________ Test01UserAPI.test_01_users_not_authenticated ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61ECDBBC8>
client = <django.test.client.Client object at 0x000001B61F0B16C8>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
        response = client.get('/api/v1/users/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:13: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
___________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61D8C5288>
client = <django.test.client.Client object at 0x000001B61F0D8E48>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
        response = client.get(f'/api/v1/users/{admin.username}/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F0FCEC8>
client = <django.test.client.Client object at 0x000001B61F105788>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
        response = client.get('/api/v1/users/me/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:37: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61EFF0948>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F17FCC8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:48: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F17F548>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F17BE48>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:93: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_04_01_users_get_admin_only ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F102288>
user_client = <rest_framework.test.APIClient object at 0x000001B61F0B3A08>

    @pytest.mark.django_db(transaction=True)
    def test_04_01_users_get_admin_only(self, user_client):
        url = '/api/v1/users/'
        response = user_client.get(url)
>       assert response.status_code != 404, (
            f'—траница `{url}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:123: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin __________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F0D4E08>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F0CF048>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 404 == 400
E         +404
E         -400

tests\test_01_users.py:135: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________ Test01UserAPI.test_05_02_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F1B2CC8>
user_superuser_client = <rest_framework.test.APIClient object at 0x000001B61F1281C8>

    @pytest.mark.django_db(transaction=True)
    def test_05_02_users_post_user_superuser(self, user_superuser_client):
        users = get_user_model().objects.all()
        users_before = users.count()
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post('/api/v1/users/', data=valid_data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, '
            'с правильными данными, возвращаете статус 201.'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, с правильными данными, возвращаете статус 201.
E       assert 404 == 201
E         +404
E         -201

tests\test_01_users.py:260: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F0CD108>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F1B7188>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F0A5288>
moderator_client = <rest_framework.test.APIClient object at 0x000001B61F213B08>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_not_admin(self, moderator_client, admin):
        response = moderator_client.get(f'/api/v1/users/{admin.username}/')
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:315: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F128B08>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F1A4388>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61E913C08>
moderator_client = <rest_framework.test.APIClient object at 0x000001B61F0DED88>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_02_users_username_patch_moderator(self, moderator_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = moderator_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью moderator не может измен€ть данные других пользователей'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью moderator не может измен€ть данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:364: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61ECC6E88>
user_client = <rest_framework.test.APIClient object at 0x000001B61F187B08>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_03_users_username_patch_user(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью user не может измен€ть данные других пользователей'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью user не может измен€ть данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:377: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_________ Test01UserAPI.test_07_05_users_username_put_user_restricted _________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F03BC08>
user_client = <rest_framework.test.APIClient object at 0x000001B61F187608>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_05_users_username_put_user_restricted(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.put(f'/api/v1/users/{user.username}/', data=data)
        code = 403
>       assert response.status_code == code, (
            'ѕроверьте, что PUT запрос на `/api/v1/users/{username}/` '
            f'не доступен и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что PUT запрос на `/api/v1/users/{username}/` не доступен и возвращаетс€ статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:391: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F107F88>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F0FCA08>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61D919708>
moderator_client = <rest_framework.test.APIClient object at 0x000001B61F0D92C8>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_02_users_username_delete_moderator(self, moderator_client, user):
        users_before = get_user_model().objects.count()
        response = moderator_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/`'
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/`не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:411: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61ECD1B88>
user_client = <rest_framework.test.APIClient object at 0x000001B61F0F5948>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_03_users_username_delete_user(self, user_client, user):
        users_before = get_user_model().objects.count()
        response = user_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:424: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61ECD4B48>
user_superuser_client = <rest_framework.test.APIClient object at 0x000001B61F18ED88>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_04_users_username_delete_superuser(self, user_superuser_client, user):
        users_before = get_user_model().objects.count()
        response = user_superuser_client.delete(f'/api/v1/users/{user.username}/')
        code = 204
>       assert response.status_code == code, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            f'от суперпользовател€, возвращаете статус {code}'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` от суперпользовател€, возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests\test_01_users.py:438: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
________________ Test01UserAPI.test_09_users_check_permissions ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F1DBBC8>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F0C9448>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61EAF7588>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F193E08>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F130488>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F128748>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x000001B61F0D9C48>
user_client = <rest_framework.test.APIClient object at 0x000001B61ECD6A88>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == 200, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200
E       assert 404 == 200
E         +404
E         -200

tests\test_01_users.py:560: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
__________ Test02CategoryAPI.test_04_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x000001B61F1BF588>
client = <django.test.client.Client object at 0x000001B61F0E3C48>
admin_client = <rest_framework.test.APIClient object at 0x000001B61E98D2C8>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'ћузыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/categories/{categories[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/categories/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_02_category.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:228 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_______________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x000001B61F27CAC8>
client = <django.test.client.Client object at 0x000001B61F1278C8>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F1C0B48>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Ѕоевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/genres/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_03_genre.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:228 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x000001B61F1B0548>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F130048>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_04_title.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x000001B61ECCE1C8>
client = <django.test.client.Client object at 0x000001B61EB32FC8>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F2A87C8>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F2A87C8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x000001B61F11BCC8>
client = <django.test.client.Client object at 0x000001B61F19E388>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F19E408>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F19E408>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001B61F1DBE08>
client = <django.test.client.Client object at 0x000001B61F083F48>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F083108>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F083108>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001B61F0DD748>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F0C7F88>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F0C7F88>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001B61E952848>
client = <django.test.client.Client object at 0x000001B61ECD2848>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F0D3748>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F0D3748>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001B61F187FC8>
client = <django.test.client.Client object at 0x000001B61F18E1C8>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F27C848>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F27C848>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001B61F19E9C8>
client = <django.test.client.Client object at 0x000001B61F1F9948>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F4C1848>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F4C1848>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001B61F0CD348>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F2418C8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F2418C8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001B61F241F48>
client = <django.test.client.Client object at 0x000001B61ECBBC08>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F247288>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F247288>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001B61F1B5788>
client = <django.test.client.Client object at 0x000001B61F254488>
admin_client = <rest_framework.test.APIClient object at 0x000001B61F254688>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000001B61F254688>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - KeyErr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ke...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - KeyEr...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 42 failed, 11 passed in 5.30s ========================
============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup FAILED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only FAILED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted FAILED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
________________ Test00UserRegistration.test_00_nodata_signup _________________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002628F7F6BC8>
client = <django.test.client.Client object at 0x000002628FABB5C8>

    @pytest.mark.django_db(transaction=True)
    def test_00_nodata_signup(self, client):
        request_type = 'POST'
        response = client.post(self.url_signup)
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` без параметров '
            f'не создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` без параметров не создаетс€ пользователь и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:22: AssertionError
---------------------------- Captured stdout setup ----------------------------
Operations to perform:
  Synchronize unmigrated apps: django_filters, messages, rest_framework, staticfiles
  Apply all migrations: admin, auth, contenttypes, reviews, sessions, users
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying users.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying reviews.0001_initial... OK
  Applying sessions.0001_initial... OK
  Applying users.0002_user_confirmation_code... OK
  Applying users.0003_auto_20220509_1301... OK
---------------------------- Captured stderr setup ----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_____________ Test00UserRegistration.test_00_invalid_data_signup ______________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002628F957D88>
client = <django.test.client.Client object at 0x000002628FC7D1C8>

    @pytest.mark.django_db(transaction=True)
    def test_00_invalid_data_signup(self, client):
        invalid_email = 'invalid_email'
        invalid_username = 'invalid_username@yamdb.fake'
    
        invalid_data = {
            'email': invalid_email,
            'username': invalid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=invalid_data)
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с невалидными данными '
            f'не создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с невалидными данными не создаетс€ пользователь и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:51: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
____________ Test00UserRegistration.test_00_valid_data_user_signup ____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002628FC83808>
client = <django.test.client.Client object at 0x000002628FC8DCC8>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с валидными данными создаетс€ пользователь и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:95: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002628FC967C8>
admin_client = <rest_framework.test.APIClient object at 0x000002628FC914C8>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
>       assert response.status_code != 404, (
            f'—траница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_00_user_registration.py:137: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x00000262900079C8>
client = <django.test.client.Client object at 0x000002628FC82A48>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
        response = client.post(self.url_token)
        assert response.status_code != 404, (
            f'—траница `{self.url_token}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 400
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` без параметров, '
            f'возвращаетс€ статус {code}'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` без username, '
            f'возвращаетс€ статус {code}'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        code = 404
        assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе `{self.url_token}` с несуществующим username, '
            f'возвращаетс€ статус {code}'
        )
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с валидными данными создаетс€ пользователь и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:228 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:228 Not Found: /api/v1/auth/token/
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
_____ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002628FC28308>
client = <django.test.client.Client object at 0x000002629009B788>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = 'valid@yamdb.fake'
        invalid_username = 'me'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email,
            'username': invalid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_00_user_registration.py:239: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x000002629003E5C8>
client = <django.test.client.Client object at 0x00000262900AB048>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'можно создать пользовател€ с валидными данными и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` можно создать пользовател€ с валидными данными и возвращаетс€ статус 200
E       assert 405 == 200
E         +405
E         -200

tests\test_00_user_registration.py:258: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/auth/signup/
________________ Test01UserAPI.test_01_users_not_authenticated ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000002629001FA48>
client = <django.test.client.Client object at 0x000002628FFC9208>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
        response = client.get('/api/v1/users/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:13: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
___________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000026290089F88>
client = <django.test.client.Client object at 0x0000026290096608>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
        response = client.get(f'/api/v1/users/{admin.username}/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900C8A88>
client = <django.test.client.Client object at 0x00000262900D7F48>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
        response = client.get('/api/v1/users/me/')
    
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/me/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:37: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900A4088>
admin_client = <rest_framework.test.APIClient object at 0x0000026290159A08>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:48: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900D9708>
admin_client = <rest_framework.test.APIClient object at 0x000002629015B348>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:93: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_04_01_users_get_admin_only ________________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900F7D08>
user_client = <rest_framework.test.APIClient object at 0x00000262901609C8>

    @pytest.mark.django_db(transaction=True)
    def test_04_01_users_get_admin_only(self, user_client):
        url = '/api/v1/users/'
        response = user_client.get(url)
>       assert response.status_code != 404, (
            f'—траница `{url}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:123: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin __________________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC98C48>
admin_client = <rest_framework.test.APIClient object at 0x0000026290100188>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 404 == 400
E         +404
E         -400

tests\test_01_users.py:135: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________ Test01UserAPI.test_05_02_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000026290083308>
user_superuser_client = <rest_framework.test.APIClient object at 0x000002629014E048>

    @pytest.mark.django_db(transaction=True)
    def test_05_02_users_post_user_superuser(self, user_superuser_client):
        users = get_user_model().objects.all()
        users_before = users.count()
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post('/api/v1/users/', data=valid_data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, '
            'с правильными данными, возвращаете статус 201.'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, с правильными данными, возвращаете статус 201.
E       assert 404 == 201
E         +404
E         -201

tests\test_01_users.py:260: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000026290100CC8>
admin_client = <rest_framework.test.APIClient object at 0x0000026290111B48>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262901B7348>
moderator_client = <rest_framework.test.APIClient object at 0x000002629053CD88>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_not_admin(self, moderator_client, admin):
        response = moderator_client.get(f'/api/v1/users/{admin.username}/')
>       assert response.status_code != 404, (
            '—траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: —траница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:315: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900D7848>
admin_client = <rest_framework.test.APIClient object at 0x00000262901E4988>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC25808>
moderator_client = <rest_framework.test.APIClient object at 0x0000026290088448>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_02_users_username_patch_moderator(self, moderator_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = moderator_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью moderator не может измен€ть данные других пользователей'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью moderator не может измен€ть данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:364: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628F931508>
user_client = <rest_framework.test.APIClient object at 0x000002628FC7F448>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_03_users_username_patch_user(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью user не может измен€ть данные других пользователей'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью user не может измен€ть данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:377: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_________ Test01UserAPI.test_07_05_users_username_put_user_restricted _________

self = <tests.test_01_users.Test01UserAPI object at 0x000002629000DD88>
user_client = <rest_framework.test.APIClient object at 0x000002628F92CC08>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_05_users_username_put_user_restricted(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.put(f'/api/v1/users/{user.username}/', data=data)
        code = 403
>       assert response.status_code == code, (
            'ѕроверьте, что PUT запрос на `/api/v1/users/{username}/` '
            f'не доступен и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что PUT запрос на `/api/v1/users/{username}/` не доступен и возвращаетс€ статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:391: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC83548>
admin_client = <rest_framework.test.APIClient object at 0x000002628F889A88>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000002629009AA08>
moderator_client = <rest_framework.test.APIClient object at 0x00000262900AA948>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_02_users_username_delete_moderator(self, moderator_client, user):
        users_before = get_user_model().objects.count()
        response = moderator_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/`'
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/`не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:411: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC81D48>
user_client = <rest_framework.test.APIClient object at 0x000002628F92C108>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_03_users_username_delete_user(self, user_client, user):
        users_before = get_user_model().objects.count()
        response = user_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:424: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC8C608>
user_superuser_client = <rest_framework.test.APIClient object at 0x0000026290106DC8>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_04_users_username_delete_superuser(self, user_superuser_client, user):
        users_before = get_user_model().objects.count()
        response = user_superuser_client.delete(f'/api/v1/users/{user.username}/')
        code = 204
>       assert response.status_code == code, (
            'ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            f'от суперпользовател€, возвращаете статус {code}'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/users/{username}/` от суперпользовател€, возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests\test_01_users.py:438: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
________________ Test01UserAPI.test_09_users_check_permissions ________________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628F969708>
admin_client = <rest_framework.test.APIClient object at 0x000002628FC7F548>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x000002628FC9E048>
admin_client = <rest_framework.test.APIClient object at 0x000002629003EB48>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x00000262900C9648>
admin_client = <rest_framework.test.APIClient object at 0x00000262901078C8>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x000002629017B1C8>
user_client = <rest_framework.test.APIClient object at 0x00000262900B04C8>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == 200, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200
E       assert 404 == 200
E         +404
E         -200

tests\test_01_users.py:560: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/me/
__________ Test02CategoryAPI.test_04_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x0000026290201708>
client = <django.test.client.Client object at 0x0000026290089C48>
admin_client = <rest_framework.test.APIClient object at 0x0000026290089848>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'ћузыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/categories/{categories[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/categories/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_02_category.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:228 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_______________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x00000262901F5588>
client = <django.test.client.Client object at 0x00000262900CB308>
admin_client = <rest_framework.test.APIClient object at 0x00000262900CB588>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Ѕоевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/genres/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_03_genre.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:228 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:228 Not Found: /api/v1/users/
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x000002628FC81988>
admin_client = <rest_framework.test.APIClient object at 0x0000026290106D48>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400
E       assert 405 == 400
E         +405
E         -400

tests\test_04_title.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x00000262900AB708>
client = <django.test.client.Client object at 0x00000262901E4EC8>
admin_client = <rest_framework.test.APIClient object at 0x000002628FC96B48>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000002628FC96B48>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x00000262901E4D08>
client = <django.test.client.Client object at 0x00000262901DBA48>
admin_client = <rest_framework.test.APIClient object at 0x00000262900A4D88>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x00000262900A4D88>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000002628FC90908>
client = <django.test.client.Client object at 0x00000262901D7F88>
admin_client = <rest_framework.test.APIClient object at 0x0000026290082408>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000026290082408>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026290089488>
admin_client = <rest_framework.test.APIClient object at 0x00000262901F5788>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x00000262901F5788>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x00000262901D7108>
client = <django.test.client.Client object at 0x00000262900C9E88>
admin_client = <rest_framework.test.APIClient object at 0x00000262900F7848>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x00000262900F7848>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x00000262901ADE08>
client = <django.test.client.Client object at 0x00000262900CFC08>
admin_client = <rest_framework.test.APIClient object at 0x00000262901E4D88>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x00000262901E4D88>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000262901500C8>
client = <django.test.client.Client object at 0x000002628FABB288>
admin_client = <rest_framework.test.APIClient object at 0x0000026290077908>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000026290077908>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000262900D7888>
admin_client = <rest_framework.test.APIClient object at 0x000002628FC91CC8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000002628FC91CC8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026290099BC8>
client = <django.test.client.Client object at 0x000002629017CC88>
admin_client = <rest_framework.test.APIClient object at 0x00000262902BAD88>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x00000262902BAD88>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000262900A9F88>
client = <django.test.client.Client object at 0x0000026290129E88>
admin_client = <rest_framework.test.APIClient object at 0x000002628FC96E48>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x000002628FC96E48>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Method Not Allowed: /api/v1/titles/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - KeyErr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ke...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - KeyEr...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 42 failed, 11 passed in 5.23s ========================
